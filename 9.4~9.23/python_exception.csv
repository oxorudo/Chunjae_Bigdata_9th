Error,설명,,예제
AssertionError,"assert 문이 실패할 때 발생하는 에러입니다. assert문은 주어진 조건이 거짓인 경우 에러를 일으키는 함수이며, if 조건문과 같이 동작합니다. assert 함수는 주로 프로그램 점검을 할 때 이용됩니다.",,">>> x = 999
>>> assert x != 999, 'x의 값이 예상과 다릅니다'

AssertionError: x의 값이 예상과 다릅니다"
AttributeError,"대상이 지원하지 않는 함수를 사용하려 할 때 발생하는 에러입니다. 예를 들어, 숫자에 문자열을 대상으로 사용되는 함수를 사용할 경우 등의 문제에서 발생합니다.",,">>> x = 9989
>>> x.split(8)

AttributeError: 'int' object has no attribute 'split'"
EOFError,input() 함수가 데이터를 읽지 못한 상태에서 EOF (end-of-file) 조건을 만날 때 발생합니다. (주의하세요: io.IOBase.read() 와 io.IOBase.readline() 메서드는 EOF를 만날 때 빈 문자열을 돌려줍니다.),,
FloatingPointError,현재 사용되지 않습니다.,,
GeneratorExit,제너레이터 또는 코루틴 이 닫힐 때 발생합니다, generator.close() 와 coroutine.close() 를 보십시오. 기술적으로 에러가 아니므로 Exception 대신에 BaseException 을 직접 계승합니다.,
ImportError,import 문이 모듈을 로드하는 데 문제가 있을 때 발생합니다. 또한 from ... import 에서 임포트 하려는 이름을 찾을 수 없을 때도 발생합니다.,,
ModuleNotFoundError,"ImportError 의 서브 클래스인데, 모듈을 찾을 수 없을 때 import 가 일으킵니다. sys.modules 에서 None 이 발견될 때도 발생합니다.",,
IndexError,시퀀스 인덱스가 범위를 벗어날 때 발생합니다. (슬라이스 인덱스는 허용된 범위 내에 들어가도록 자동으로 잘립니다, 인덱스가 정수가 아니면 TypeError 가 발생합니다.),
KeyError,매핑 (딕셔너리) 키가 기존 키 집합에서 발견되지 않을 때 발생합니다.,,
KeyboardInterrupt,"사용자가 인터럽트 키(일반적으로 Control-C 또는 Delete)를 누를 때 발생합니다. 실행 중에 인터럽트 검사가 정기적으로 수행됩니다. Exception을 잡는 코드에 의해 우연히 잡혀서, 인터프리터가 종료하는 것을 막지 못하도록 BaseException 를 계승합니다.",,
MemoryError,"작업에 메모리가 부족하지만, 상황이 여전히 (일부 객체를 삭제해서) 복구될 수 있는 경우 발생합니다. 연관된 값은 어떤 종류의 (내부) 연산이 메모리를 다 써 버렸는지를 나타내는 문자열입니다. 하부 메모리 관리 아키텍처(C의 malloc() 함수)때문에, 인터프리터가 항상 이 상황을 완벽하게 복구할 수 있는 것은 아닙니다; 그런데도 통제를 벗어난 프로그램이 원인인 경우를 위해, 스택 트레이스백을 인쇄할 수 있도록 예외를 일으킵니다.",,
NameError,지역 또는 전역 이름을 찾을 수 없을 때 발생합니다. 이는 정규화되지 않은 이름에만 적용됩니다. 연관된 값은 찾을 수 없는 이름을 포함하는 에러 메시지입니다.,,
NotImplementedError,"이 예외는 RuntimeError 에서 파생됩니다. 사용자 정의 베이스 클래스에서, 파생 클래스가 재정의하도록 요구하는 추상 메서드나, 클래스가 개발되는 도중에 실제 구현이 추가될 필요가 있음을 나타낼 때 이 예외를 발생시켜야 합니다.",,
OSError([arg]),"exception OSError(errno, strerror[, filename[, winerror[, filename2]]])",,
OverflowError,"산술 연산의 결과가 너무 커서 표현할 수 없을 때 발생합니다. 정수에서는 발생하지 않습니다 (포기하기보다는 MemoryError 를 일으키게 될 겁니다). 그러나, 역사적인 이유로, 때로 OverflowError는 요구되는 범위를 벗어난 정수의 경우도 발생합니다. C에서 부동 소수점 예외 처리의 표준화가 부족하므로, 대부분의 부동 소수점 연산은 검사되지 않습니다.",,
RecursionError,이 예외는 RuntimeError 에서 파생됩니다. 인터프리터가 최대 재귀 깊이(sys.getrecursionlimit() 참조)가 초과하였음을 감지할 때 발생합니다.,,
ReferenceError,이 예외는 weakref.proxy() 함수가 만든 약한 참조 프락시가 이미 가비지 수집된 참조 대상의 어트리뷰트를 액세스하는 데 사용될 때 발생합니다. 약한 참조에 대한 더 자세한 정보는 weakref 모듈을 보십시오.,,
RuntimeError,다른 범주에 속하지 않는 에러가 감지될 때 발생합니다. 연관된 값은 정확히 무엇이 잘못되었는지를 나타내는 문자열입니다.,,
StopIteration,"이터레이터에 의해 생성된 항목이 더 없다는 것을 알려주기 위해, 내장 함수 next()와 이터레이터의 __next__() 메서드가 일으킵니다.",,
StopAsyncIteration,반드시 비동기 이터레이터 객체의 __anext__() 메서드가 이터레이션을 멈추고자 할 때 발생시켜야 합니다.,,
details),"Raised when the parser encounters a syntax error. This may occur in an import statement, in a call to the built-in functions compile(), exec(), or eval(), or when reading the initial script or standard input (also interactively).",,
IndentationError,잘못된 들여쓰기와 관련된 문법 오류의 베이스 클래스입니다. SyntaxError 의 서브 클래스입니다.,,
TabError,들여쓰기가 일관성없는 탭과 스페이스 사용을 포함하는 경우 발생합니다. IndentationError 의 서브 클래스입니다.,,
SystemError,"인터프리터가 내부 에러를 발견했지만, 모든 희망을 포기할 만큼 상황이 심각해 보이지는 않을 때 발생합니다. 연관된 값은 무엇이 잘못되었는지 (저수준의 용어로) 나타내는 문자열입니다.",,
SystemExit,"이 예외는 sys.exit() 함수가 일으킵니다. Exception을 잡는 코드에 의해 우연히 잡히지 않도록, Exception 대신에 BaseException 을 상속합니다. 이렇게 하면 예외가 올바르게 전파되어 인터프리터가 종료됩니다. 처리되지 않으면, 파이썬 인터프리터가 종료됩니다; 스택 트레이스백은 인쇄되지 않습니다. 생성자는 sys.exit() 에 전달된 것과 같은 선택적 인자를 받아들입니다. 값이 정수이면 시스템 종료 상태를 지정합니다 (C의 exit() 함수에 전달됩니다); None 이면 종료 상태는 0입니다; 다른 형(가령 문자열)이면 객체의 값이 인쇄되고 종료 상태는 1입니다.",,
TypeError,연산이나 함수가 부적절한 형의 객체에 적용될 때 발생합니다. 연관된 값은 형 불일치에 대한 세부 정보를 제공하는 문자열입니다.,,
UnboundLocalError,"함수 나 메서드에서 지역 변수를 참조하지만, 해당 변수에 값이 연결되지 않으면 발생합니다. 이것은 NameError 의 서브 클래스입니다.",,
UnicodeError,유니코드 관련 인코딩 또는 디코딩 에러가 일어날 때 발생합니다. ValueError 의 서브 클래스입니다.,,
UnicodeEncodeError,인코딩 중에 유니코드 관련 에러가 일어나면 발생합니다. UnicodeError 의 서브 클래스입니다.,,
UnicodeDecodeError,디코딩 중에 유니코드 관련 에러가 일어나면 발생합니다. UnicodeError 의 서브 클래스입니다.,,
UnicodeTranslateError,번역 중에 유니코드 관련 에러가 일어나면 발생합니다. UnicodeError 의 서브 클래스입니다.,,
ValueError,"연산이나 함수가 올바른 형이지만 부적절한 값을 가진 인자를 받았고, 상황이 IndexError 처럼 더 구체적인 예외로 설명되지 않는 경우 발생합니다.",,
ZeroDivisionError,나누기 또는 모듈로 연산의 두 번째 인자가 0일 때 발생합니다. 연관된 값은 피연산자의 형과 연산을 나타내는 문자열입니다.,,
WindowsError,윈도우에서만 사용할 수 있습니다.,,
abs(x),"숫자의 절댓값을 돌려줍니다. 인자는 정수, 실수 또는 __abs__()를 구현하는 객체입니다. 인자가 복소수면 그 크기가 반환됩니다.",,
aiter(async_iterable),Return an asynchronous iterator for an asynchronous iterable. Equivalent to calling x.__aiter__().,,
all(iterable),iterable 의 모든 요소가 참이면 (또는 iterable 이 비어있으면) True 를 돌려줍니다. 다음과 동등합니다:,,
awaitable anext(async_iterator),"awaitable anext(async_iterator, default)",,
any(iterable),iterable 의 요소 중 어느 하나라도 참이면 True 를 돌려줍니다. iterable이 비어 있으면 False 를 돌려줍니다. 다음과 동등합니다:,,
ascii(object),"As repr(), return a string containing a printable representation of an object, but escape the non-ASCII characters in the string returned by repr() using \x, \u, or \U escapes. This generates a string similar to that returned by repr() in Python 2.",,
bin(x),"정수를 “0b” 가 앞에 붙은 이진 문자열로 변환합니다. 결과는 올바른 파이썬 표현식입니다. x 가 파이썬 int 객체가 아니라면, 정수를 돌려주는 __index__() 메서드를 정의해야 합니다. 몇 가지 예를 들면:",,
class bool(x=False),"Return a Boolean value, i.e. one of True or False. x is converted using the standard truth testing procedure. If x is false or omitted, this returns False; otherwise, it returns True. The bool class is a subclass of int (see 숫자 형 — int, float, complex). It cannot be subclassed further. Its only instances are False and True (see 논리값).",,
"breakpoint(*args, **kws)","This function drops you into the debugger at the call site. Specifically, it calls sys.breakpointhook(), passing args and kws straight through. By default, sys.breakpointhook() calls pdb.set_trace() expecting no arguments. In this case, it is purely a convenience function so you don’t have to explicitly import pdb or type as much code to enter the debugger. However, sys.breakpointhook() can be set to some other function and breakpoint() will automatically call that, allowing you to drop into the debugger of choice. If sys.breakpointhook() is not accessible, this function will raise RuntimeError.",,
class bytearray(source=b''),"class bytearray(source, encoding)",,
class bytes(source=b''),"class bytes(source, encoding)",,
callable(object),"object 인자가 콜러블인 것처럼 보이면 True를, 그렇지 않으면 False 를 돌려줍니다. 이것이 True를 돌려줘도 여전히 호출이 실패할 가능성이 있지만, False일 때 object 를 호출하면 반드시 실패합니다. 클래스가 콜러블 이라는 것에 유의하세요 (클래스를 호출하면 새 인스턴스를 돌려줍니다); 클래스에 __call__() 메서드가 있으면 인스턴스도 콜러블입니다.",,
chr(i),"유니코드 코드 포인트가 정수 i 인 문자를 나타내는 문자열을 돌려줍니다. 예를 들어, chr(97) 은 문자열 'a' 를 돌려주고, chr(8364) 는 문자열 '€' 를 돌려줍니다. 이 것은 ord() 의 반대입니다.",,
@classmethod,메서드를 클래스 메서드로 변환합니다.,,
"compile(source, filename, mode, flags=0, dont_inherit=False, optimize=- 1)","source 를 코드 또는 AST 객체로 컴파일합니다. 코드 객체는 exec() 또는 eval() 로 실행할 수 있습니다. source 는 일반 문자열, 바이트열 또는 AST 객체 일 수 있습니다. AST 객체로 작업하는 방법에 대한 정보는 ast 모듈 문서를 참조하세요.",,
"class complex(real=0, imag=0)",class complex(string),,
"delattr(object, name)","This is a relative of setattr(). The arguments are an object and a string. The string must be the name of one of the object’s attributes. The function deletes the named attribute, provided the object allows it. For example, delattr(x, 'foobar') is equivalent to del x.foobar. name need not be a Python identifier (see setattr()).",,
class dict(**kwarg),"class dict(mapping, **kwarg)",,
dir(),dir(object),,
"divmod(a, b)","Take two (non-complex) numbers as arguments and return a pair of numbers consisting of their quotient and remainder when using integer division. With mixed operand types, the rules for binary arithmetic operators apply. For integers, the result is the same as (a // b, a % b). For floating point numbers the result is (q, a % b), where q is usually math.floor(a / b) but may be 1 less than that. In any case q * b + a % b is very close to a, if a % b is non-zero it has the same sign as b, and 0 <= abs(a % b) < abs(b).",,
"enumerate(iterable, start=0)","열거 객체를 돌려줍니다. iterable 은 시퀀스, 이터레이터 또는 이터레이션을 지원하는 다른 객체여야 합니다. enumerate() 에 의해 반환된 이터레이터의 __next__() 메서드는 카운트 (기본값 0을 갖는 start 부터)와 iterable 을 이터레이션 해서 얻어지는 값을 포함하는 튜플을 돌려줍니다.",,
"eval(expression, globals=None, locals=None)","인자는 문자열 및 선택적 globals 및 locals다. 제공된 경우, globals 는 딕셔너리여야 합니다. 제공되는 경우, locals 는 모든 매핑 객체가 될 수 있습니다.",,
"exec(object, globals=None, locals=None, /, *, closure=None)","This function supports dynamic execution of Python code. object must be either a string or a code object. If it is a string, the string is parsed as a suite of Python statements which is then executed (unless a syntax error occurs). 1 If it is a code object, it is simply executed. In all cases, the code that’s executed is expected to be valid as file input (see the section 파일 입력 in the Reference Manual). Be aware that the nonlocal, yield, and return statements may not be used outside of function definitions even within the context of code passed to the exec() function. The return value is None.",,
"filter(function, iterable)","Construct an iterator from those elements of iterable for which function is true. iterable may be either a sequence, a container which supports iteration, or an iterator. If function is None, the identity function is assumed, that is, all elements of iterable that are false are removed.",,
class float(x=0.0),숫자 또는 문자열 x 로 부터 실수를 만들어 돌려줍니다.,,
"format(value, format_spec='')","Convert a value to a “formatted” representation, as controlled by format_spec. The interpretation of format_spec will depend on the type of the value argument; however, there is a standard formatting syntax that is used by most built-in types: 포맷 명세 미니 언어.",,
class frozenset(iterable=set()),"새 frozenset 객체를 돌려주는데, 선택적으로 iterable 에서 가져온 요소를 포함합니다. frozenset 은 내장 클래스입니다. 이 클래스에 대한 설명서는 frozenset 과 집합 형 — set, frozenset을 보세요.",,
"getattr(object, name)","getattr(object, name, default)",,
globals(),"Return the dictionary implementing the current module namespace. For code within functions, this is set when the function is defined and remains the same regardless of where the function is called.",,
"hasattr(object, name)","인자는 객체와 문자열입니다. 문자열이 객체의 속성 중 하나의 이름이면 결과는 True 이고, 그렇지 않으면 False 가 됩니다. (이것은 getattr(object, name) 을 호출하고 AttributeError 를 발생시키는지를 보는 식으로 구현됩니다.)",,
hash(object),객체의 해시값을 돌려줍니다 (해시가 있는 경우). 해시값은 정수다. 딕셔너리 조회 중에 딕셔너리 키를 빨리 비교하는 데 사용됩니다. 같다고 비교되는 숫자 값은 같은 해시값을 갖습니다 (1과 1.0의 경우와 같이 형이 다른 경우조차도 그렇습니다).,,
help(),help(request),,
hex(x),"정수를 “0x” 접두사가 붙은 소문자 16진수 문자열로 변환합니다. x 가 파이썬 int 객체가 아니면, 정수를 돌려주는 __index__() 메서드를 정의해야 합니다. 몇 가지 예:",,
id(object),객체의 “아이덴티티”를 돌려준다. 이것은 객체의 수명 동안 유일하고 바뀌지 않음이 보장되는 정수입니다. 수명이 겹치지 않는 두 개의 객체는 같은 id() 값을 가질 수 있습니다.,,
input(),input(prompt),,
class int(x=0),"class int(x, base=10)",,
"isinstance(object, classinfo)","Return True if the object argument is an instance of the classinfo argument, or of a (direct, indirect, or virtual) subclass thereof. If object is not an object of the given type, the function always returns False. If classinfo is a tuple of type objects (or recursively, other such tuples) or a Union Type of multiple types, return True if object is an instance of any of the types. If classinfo is not a type or tuple of types and such tuples, a TypeError exception is raised. TypeError may not be raised for an invalid type if an earlier check succeeds.",,
"issubclass(class, classinfo)","Return True if class is a subclass (direct, indirect, or virtual) of classinfo. A class is considered a subclass of itself. classinfo may be a tuple of class objects (or recursively, other such tuples) or a Union Type, in which case return True if class is a subclass of any entry in classinfo. In any other case, a TypeError exception is raised.",,
iter(object),"iter(object, sentinel)",,
len(s),"객체의 길이 (항목 수)를 돌려줍니다. 인자는 시퀀스 (문자열, 바이트열, 튜플, 리스트 또는 range 같은) 또는 컬렉션 (딕셔너리, 집합 또는 불변 집합 같은) 일 수 있습니다.",,
class list,class list(iterable),,
locals(),"현재 지역 심볼 테이블을 나타내는 딕셔너리를 갱신하고 돌려줍니다. locals() 이 함수 블록에서 호출될 때 자유 변수를 돌려주지만, 클래스 블록에서 호출할 때는 그렇지 않습니다. 모듈 수준에서 locals()와 globals()는 같은 딕셔너리임에 유의하십시오.",,
"map(function, iterable, *iterables)","Return an iterator that applies function to every item of iterable, yielding the results. If additional iterables arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel. With multiple iterables, the iterator stops when the shortest iterable is exhausted. For cases where the function inputs are already arranged into argument tuples, see itertools.starmap().",,
"max(iterable, *, key=None)","max(iterable, *, default, key=None)",,
class memoryview(object),지정된 인자로부터 만들어진 “메모리 뷰” 객체를 돌려줍니다. 자세한 정보는 메모리 뷰 를 보세요.,,
"min(iterable, *, key=None)","min(iterable, *, default, key=None)",,
next(iterator),"next(iterator, default)",,
class object,Return a new featureless object. object is a base for all classes. It has methods that are common to all instances of Python classes. This function does not accept any arguments.,,
oct(x),"정수를 “0o”로 시작하는 8진수 문자열로 변환합니다. 결과는 올바른 파이썬 표현식입니다. x 가 파이썬 int 객체가 아니면, 정수를 돌려주는 __index__() 메서드를 정의해야 합니다. 예를 들어:",,
"open(file, mode='r', buffering=- 1, encoding=None, errors=None, newline=None, closefd=True, opener=None)","file 을 열고 해당 파일 객체 를 돌려줍니다. 파일을 열 수 없으면, OSError 가 발생합니다. 이 함수를 사용하는 방법에 대한 더 많은 예제는 파일을 읽고 쓰기를 참조하십시오.",,
ord(c),"하나의 유니코드 문자를 나타내는 문자열이 주어지면 해당 문자의 유니코드 코드 포인트를 나타내는 정수를 돌려줍니다. 예를 들어, ord('a') 는 정수 97 을 반환하고 ord('€') (유로 기호)는 8364 를 반환합니다. 이것은 chr() 의 반대입니다.",,
"pow(base, exp, mod=None)","base 의 exp 거듭제곱을 돌려줍니다; mod 가 있는 경우, base 의 exp 거듭제곱의 모듈로 mod 를 돌려줍니다 (pow(base, exp) % mod 보다 더 빠르게 계산됩니다). 두 개의 인자 형식인 pow(base, exp) 는 거듭제곱 연산자를 사용하는 것과 동등합니다: base**exp.",,
"print(*objects, sep=' ', end='\n', file=None, flush=False)","Print objects to the text stream file, separated by sep and followed by end. sep, end, file, and flush, if present, must be given as keyword arguments.",,
"class property(fget=None, fset=None, fdel=None, doc=None)",프로퍼티 어트리뷰트를 돌려줍니다.,,
class range(stop),"class range(start, stop, step=1)",,
repr(object),"Return a string containing a printable representation of an object. For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to eval(); otherwise, the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object. A class can control what this function returns for its instances by defining a __repr__() method. If sys.displayhook() is not accessible, this function will raise RuntimeError.",,
reversed(seq),역 이터레이터 를 돌려줍니다. seq 는 __reversed__() 메서드를 가졌거나 시퀀스 프로토콜(__len__() 메서드와 0 에서 시작하는 정수 인자를 받는 __getitem__() 메서드)을 지원하는 객체여야 합니다.,,
"round(number, ndigits=None)","number 를 소수점 다음에 ndigits 정밀도로 반올림한 값을 돌려줍니다. ndigits 가 생략되거나 None 이면, 입력에 가장 가까운 정수를 돌려줍니다.",,
class set,class set(iterable),,
"setattr(object, name, value)","This is the counterpart of getattr(). The arguments are an object, a string, and an arbitrary value. The string may name an existing attribute or a new attribute. The function assigns the value to the attribute, provided the object allows it. For example, setattr(x, 'foobar', 123) is equivalent to x.foobar = 123.",,
class slice(stop),"class slice(start, stop, step=1)",,
"sorted(iterable, /, *, key=None, reverse=False)",iterable 의 항목들로 새 정렬된 리스트를 돌려줍니다.,,
@staticmethod,메서드를 정적 메서드로 변환합니다.,,
class str(object=''),"class str(object=b'', encoding='utf-8', errors='strict')",,
"sum(iterable, /, start=0)",start 및 iterable 의 항목들을 왼쪽에서 오른쪽으로 합하고 합계를 돌려줍니다. iterable 의 항목은 일반적으로 숫자며 시작 값은 문자열이 될 수 없습니다.,,
class super,"class super(type, object_or_type=None)",,
class tuple,class tuple(iterable),,
class type(object),"class type(name, bases, dict, **kwds)",,
vars(),vars(object),,
"zip(*iterables, strict=False)","Iterate over several iterables in parallel, producing tuples with an item from each one.",,
"__import__(name, globals=None, locals=None, fromlist=(), level=0)",참고 이것은 importlib.import_module() 과 달리 일상적인 파이썬 프로그래밍에서는 필요하지 않은 고급 함수입니다.,,
Assertion,assert 문이 실패할 때 발생합니다.,,
Attribute,어트리뷰트 참조(어트리뷰트 참조를 보세요)나 대입이 실패할 때 발생합니다. (객체가 어트리뷰트 참조나 어트리뷰트 대입을 아예 지원하지 않으면 TypeError 가 발생합니다.),,
EOF,input() 함수가 데이터를 읽지 못한 상태에서 EOF (end-of-file) 조건을 만날 때 발생합니다. (주의하세요: io.IOBase.read() 와 io.IOBase.readline() 메서드는 EOF를 만날 때 빈 문자열을 돌려줍니다.),,
FloatingPoint,현재 사용되지 않습니다.,,
Import,import 문이 모듈을 로드하는 데 문제가 있을 때 발생합니다. 또한 from ... import 에서 임포트 하려는 이름을 찾을 수 없을 때도 발생합니다.,,
ModuleNotFound,"ImportError 의 서브 클래스인데, 모듈을 찾을 수 없을 때 import 가 일으킵니다. sys.modules 에서 None 이 발견될 때도 발생합니다.",,
Index,시퀀스 인덱스가 범위를 벗어날 때 발생합니다. (슬라이스 인덱스는 허용된 범위 내에 들어가도록 자동으로 잘립니다, 인덱스가 정수가 아니면 TypeError 가 발생합니다.),
Key,매핑 (딕셔너리) 키가 기존 키 집합에서 발견되지 않을 때 발생합니다.,,
Memory,"작업에 메모리가 부족하지만, 상황이 여전히 (일부 객체를 삭제해서) 복구될 수 있는 경우 발생합니다. 연관된 값은 어떤 종류의 (내부) 연산이 메모리를 다 써 버렸는지를 나타내는 문자열입니다. 하부 메모리 관리 아키텍처(C의 malloc() 함수)때문에, 인터프리터가 항상 이 상황을 완벽하게 복구할 수 있는 것은 아닙니다; 그런데도 통제를 벗어난 프로그램이 원인인 경우를 위해, 스택 트레이스백을 인쇄할 수 있도록 예외를 일으킵니다.",,
Name,지역 또는 전역 이름을 찾을 수 없을 때 발생합니다. 이는 정규화되지 않은 이름에만 적용됩니다. 연관된 값은 찾을 수 없는 이름을 포함하는 에러 메시지입니다.,,
NotImplemented,"이 예외는 RuntimeError 에서 파생됩니다. 사용자 정의 베이스 클래스에서, 파생 클래스가 재정의하도록 요구하는 추상 메서드나, 클래스가 개발되는 도중에 실제 구현이 추가될 필요가 있음을 나타낼 때 이 예외를 발생시켜야 합니다.",,
OS([arg]),"exception OSError(errno, strerror[, filename[, winerror[, filename2]]])",,
Overflow,"산술 연산의 결과가 너무 커서 표현할 수 없을 때 발생합니다. 정수에서는 발생하지 않습니다 (포기하기보다는 MemoryError 를 일으키게 될 겁니다). 그러나, 역사적인 이유로, 때로 OverflowError는 요구되는 범위를 벗어난 정수의 경우도 발생합니다. C에서 부동 소수점 예외 처리의 표준화가 부족하므로, 대부분의 부동 소수점 연산은 검사되지 않습니다.",,
Recursion,이 예외는 RuntimeError 에서 파생됩니다. 인터프리터가 최대 재귀 깊이(sys.getrecursionlimit() 참조)가 초과하였음을 감지할 때 발생합니다.,,
Reference,이 예외는 weakref.proxy() 함수가 만든 약한 참조 프락시가 이미 가비지 수집된 참조 대상의 어트리뷰트를 액세스하는 데 사용될 때 발생합니다. 약한 참조에 대한 더 자세한 정보는 weakref 모듈을 보십시오.,,
Runtime,다른 범주에 속하지 않는 에러가 감지될 때 발생합니다. 연관된 값은 정확히 무엇이 잘못되었는지를 나타내는 문자열입니다.,,
Indentation,잘못된 들여쓰기와 관련된 문법 오류의 베이스 클래스입니다. SyntaxError 의 서브 클래스입니다.,,
Tab,들여쓰기가 일관성없는 탭과 스페이스 사용을 포함하는 경우 발생합니다. IndentationError 의 서브 클래스입니다.,,
System,"인터프리터가 내부 에러를 발견했지만, 모든 희망을 포기할 만큼 상황이 심각해 보이지는 않을 때 발생합니다. 연관된 값은 무엇이 잘못되었는지 (저수준의 용어로) 나타내는 문자열입니다.",,
Type,연산이나 함수가 부적절한 형의 객체에 적용될 때 발생합니다. 연관된 값은 형 불일치에 대한 세부 정보를 제공하는 문자열입니다.,,
UnboundLocal,"함수 나 메서드에서 지역 변수를 참조하지만, 해당 변수에 값이 연결되지 않으면 발생합니다. 이것은 NameError 의 서브 클래스입니다.",,
Unicode,유니코드 관련 인코딩 또는 디코딩 에러가 일어날 때 발생합니다. ValueError 의 서브 클래스입니다.,,
UnicodeEncode,인코딩 중에 유니코드 관련 에러가 일어나면 발생합니다. UnicodeError 의 서브 클래스입니다.,,
UnicodeDecode,디코딩 중에 유니코드 관련 에러가 일어나면 발생합니다. UnicodeError 의 서브 클래스입니다.,,
UnicodeTranslate,번역 중에 유니코드 관련 에러가 일어나면 발생합니다. UnicodeError 의 서브 클래스입니다.,,
Value,"연산이나 함수가 올바른 형이지만 부적절한 값을 가진 인자를 받았고, 상황이 IndexError 처럼 더 구체적인 예외로 설명되지 않는 경우 발생합니다.",,
ZeroDivision,나누기 또는 모듈로 연산의 두 번째 인자가 0일 때 발생합니다. 연관된 값은 피연산자의 형과 연산을 나타내는 문자열입니다.,,
Windows,윈도우에서만 사용할 수 있습니다.,,
"Syntax(message, details)","Raised when the parser encounters a syntax error. This may occur in an import statement, in a call to the built-in functions compile(), exec(), or eval(), or when reading the initial script or standard input (also interactively).",,
